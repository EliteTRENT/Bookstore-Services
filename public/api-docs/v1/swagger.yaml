openapi: 3.0.1
info:
  title: Book Store App
  version: 1.0.0
  description: API documentation for the Book Store app.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Authorization header using the Bearer scheme. Enter 'Bearer [space] your_token'."
paths:
  /api/v1/users/signup:
    post:
      summary: User Signup
      description: Creates a new user account.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "John Doe"
                    email:
                      type: string
                      format: email
                      example: user@example.com
                    password:
                      type: string
                      format: password
                      example: "Password@123"
                    mobile_number:
                      type: string
                      example: "+919876543210"
                  required:
                    - name
                    - email
                    - password
                    - mobile_number
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      mobile_number:
                        type: string
                        example: "+919876543210"
        "422":
          description: Validation error (unprocessable entity)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Email can't be blank"

  /api/v1/users/login:
    post:
      summary: User Login
      description: Authenticates an existing user and returns a JWT token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: user@example.com
                    password:
                      type: string
                      format: password
                      example: "Password@123"
                  required:
                    - email
                    - password
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoiSm9obiBEb2UiLCJlbWFpbCI6InVzZXJAZXhhbXBsZS5jb20ifQ.signature"
        "422":
          description: Validation error (unprocessable entity)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Email is not registered"
                example:
                  errors: "Wrong Password"

  /api/v1/users/forget:
    post:
      summary: Forget Password
      description: Initiates a password reset by sending an OTP to the user's registered email via RabbitMQ.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                      example: user@example.com
                  required:
                    - email
      responses:
        "200":
          description: OTP successfully enqueued and sent to email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to user@example.com, check your inbox"
                  otp:
                    type: integer
                    example: 123456
                  user_id:
                    type: integer
                    example: 123
                  otp_generated_at:
                    type: string
                    format: date-time
                    example: "2025-03-06T12:00:00Z"
        "422":
          description: Email not found or OTP enqueue failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Email is not registered"
                example:
                  errors: "Failed to send OTP, please try again"

  /api/v1/users/reset/{id}:
    post:
      summary: Reset Password
      description: Resets the user's password using a valid OTP received from the forget password endpoint.
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user whose password is being reset
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    new_password:
                      type: string
                      format: password
                      example: "NewPass@123"
                    otp:
                      type: integer
                      example: 123456
                  required:
                    - new_password
                    - otp
      responses:
        "200":
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password successfully reset"
        "422":
          description: Validation error, user not found, or OTP invalid/expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "User not found"
                examples:
                  user_not_found:
                    value:
                      errors: "User not found"
                  invalid_otp:
                    value:
                      errors: "Invalid or expired OTP"
                  validation_error:
                    value:
                      errors: "Password can't be blank"

  /api/v1/books:
    post:
      summary: Create Book
      description: Creates a new book with the provided details
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "The Great Gatsby"
                      minLength: 1
                      description: "Book title (required)"
                    author:
                      type: string
                      example: "F. Scott Fitzgerald"
                      minLength: 1
                      description: "Author name (required)"
                    mrp:
                      type: number
                      format: float
                      minimum: 0
                      example: 20.99
                      description: "Maximum retail price (must be >= 0)"
                    discounted_price:
                      type: number
                      format: float
                      minimum: 0
                      example: 15.99
                      description: "Discounted price (must be >= 0)"
                    quantity:
                      type: integer
                      minimum: 0
                      example: 100
                      description: "Stock quantity (must be integer >= 0)"
                    book_details:
                      type: string
                      nullable: true
                      example: "A story of the fabulously wealthy Jay Gatsby"
                      description: "Additional book details (optional)"
                    genre:
                      type: string
                      nullable: true
                      example: "Fiction"
                      description: "Book genre (optional)"
                    book_image:
                      type: string
                      nullable: true
                      example: "http://example.com/book-cover.jpg"
                      description: "URL to book cover image (optional)"
                  required:
                    - name
                    - author
                    - mrp
                    - discounted_price
                    - quantity
      responses:
        "201":
          description: Book successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book created successfully"
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "The Great Gatsby"
                      author:
                        type: string
                        example: "F. Scott Fitzgerald"
                      mrp:
                        type: number
                        format: float
                        example: 20.99
                      discounted_price:
                        type: number
                        format: float
                        example: 15.99
                      quantity:
                        type: integer
                        example: 100
                      book_details:
                        type: string
                        nullable: true
                        example: "A story of the fabulously wealthy Jay Gatsby"
                      genre:
                        type: string
                        nullable: true
                        example: "Fiction"
                      book_image:
                        type: string
                        nullable: true
                        example: "http://example.com/book-cover.jpg"
        "400":
          description: Invalid request or book already in wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Invalid request"
        "422":
          description: Validation error (unprocessable entity)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    examples:
                      missing_fields:
                        value: ["Name can't be blank", "Author can't be blank"]
                      invalid_numbers:
                        value: ["Mrp must be greater than or equal to 0"]
                      invalid_quantity:
                        value: ["Quantity must be an integer"]
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Unauthorized"
    get:
      summary: Get All Books
      description: Retrieves a list of all non-deleted books, ordered by creation date (newest first)
      tags:
        - Books
      responses:
        "200":
          description: Books retrieved successfully (returns array even if empty)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Books retrieved successfully"
                  books:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "The Great Gatsby"
                        author:
                          type: string
                          example: "F. Scott Fitzgerald"
                        mrp:
                          type: number
                          format: float
                          example: 20.99
                        discounted_price:
                          type: number
                          format: float
                          example: 15.99
                        quantity:
                          type: integer
                          example: 100
                        book_details:
                          type: string
                          nullable: true
                          example: "A story of the fabulously wealthy Jay Gatsby"
                        genre:
                          type: string
                          nullable: true
                          example: "Fiction"
                        book_image:
                          type: string
                          nullable: true
                          example: "http://example.com/book-cover.jpg"
              examples:
                with_books:
                  summary: Successful response with books
                  value:
                    message: "Books retrieved successfully"
                    books:
                      - id: 1
                        name: "The Great Gatsby"
                        author: "F. Scott Fitzgerald"
                        mrp: 20.99
                        discounted_price: 15.99
                        quantity: 100
                        book_details: "A story of the fabulously wealthy Jay Gatsby"
                        genre: "Fiction"
                        book_image: "http://example.com/book-cover.jpg"
                      - id: 2
                        name: "1984"
                        author: "George Orwell"
                        mrp: 15.99
                        discounted_price: 12.99
                        quantity: 50
                        book_details: "A dystopian novel"
                        genre: "Science Fiction"
                        book_image: "http://example.com/1984-cover.jpg"
                no_books:
                  summary: Successful response with no books
                  value:
                    message: "No books available"
                    books: []
        "500":
          description: Internal Server Error - Database or server failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Internal server error occurred while retrieving books"
              example:
                errors: "Internal server error occurred while retrieving books"

  /api/v1/wishlists/add:
    post:
      summary: Add Book to Wishlist
      description: Adds a book to the authenticated user's wishlist.
      tags:
        - Wishlists
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                wishlist:
                  type: object
                  properties:
                    book_id:
                      type: integer
                      example: 456
                      description: "The ID of the book to add to the wishlist"
                  required:
                    - book_id
      responses:
        "201":
          description: Book successfully added to wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book added to wishlist!"
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token"
        "404":
          description: User or Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      user_not_found:
                        value: "User not found"
                      book_not_found:
                        value: "Book not found"
        "422":
          description: Validation error or book already in wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Book is already in your wishlist"]

  /api/v1/wishlists/getAll:
    get:
      summary: Get All Wishlist Items
      description: Retrieves all active books in the authenticated user's wishlist.
      tags:
        - Wishlists
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Wishlist retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      type: object
                      properties:
                        book_id:
                          type: integer
                          example: 456
                        book_name:
                          type: string
                          example: "Test Book"
              examples:
                with_items:
                  summary: Wishlist with items
                  value:
                    message:
                      - book_id: 456
                        book_name: "Test Book"
                empty_wishlist:
                  summary: Empty wishlist
                  value:
                    message: []
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  /api/v1/wishlists/delete/{book_id}:
    delete:
      summary: Remove Book from Wishlist
      description: Removes a book from the authenticated user's wishlist by marking it as deleted.
      tags:
        - Wishlists
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: book_id
          in: path
          required: true
          description: The ID of the book to remove from the wishlist
          schema:
            type: integer
            example: 456
      responses:
        "200":
          description: Book successfully removed from wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book removed from wishlist!"
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid token"
        "404":
          description: User not found or book not in wishlist
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    examples:
                      user_not_found:
                        value: "User not found"
                      book_not_found:
                        value: "Book not found in wishlist"

  /api/v1/books/update/{id}:
    patch:
      summary: Update Book
      description: Updates an existing book with the provided details
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "The Great Gatsby"
                      minLength: 1
                      description: "Book title"
                    author:
                      type: string
                      example: "F. Scott Fitzgerald"
                      minLength: 1
                      description: "Author name"
                    mrp:
                      type: number
                      format: float
                      minimum: 0
                      example: 20.99
                      description: "Maximum retail price (must be >= 0)"
                    discounted_price:
                      type: number
                      format: float
                      minimum: 0
                      example: 15.99
                      description: "Discounted price (must be >= 0)"
                    quantity:
                      type: integer
                      minimum: 0
                      example: 100
                      description: "Stock quantity (must be integer >= 0)"
                    book_details:
                      type: string
                      nullable: true
                      example: "A story of the fabulously wealthy Jay Gatsby"
                      description: "Additional book details (optional)"
                    genre:
                      type: string
                      nullable: true
                      example: "Fiction"
                      description: "Book genre (optional)"
                    book_image:
                      type: string
                      nullable: true
                      example: "http://example.com/book-cover.jpg"
                      description: "URL to book cover image (optional)"
      responses:
        "200":
          description: Book successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book updated successfully"
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "The Great Gatsby"
                      author:
                        type: string
                        example: "F. Scott Fitzgerald"
                      mrp:
                        type: number
                        format: float
                        example: 20.99
                      discounted_price:
                        type: number
                        format: float
                        example: 15.99
                      quantity:
                        type: integer
                        example: 100
                      book_details:
                        type: string
                        nullable: true
                        example: "A story of the fabulously wealthy Jay Gatsby"
                      genre:
                        type: string
                        nullable: true
                        example: "Fiction"
                      book_image:
                        type: string
                        nullable: true
                        example: "http://example.com/book-cover.jpg"
        "422":
          description: Validation error or book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    examples:
                      not_found:
                        value: ["Book not found or has been deleted"]
                      validation_errors:
                        value: ["Name can't be blank", "Mrp must be greater than or equal to 0"]

  /api/v1/books/show/{id}:
    get:
      summary: Get Book by ID
      description: Retrieves a specific book by its ID, if it exists and is not deleted
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to retrieve
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book retrieved successfully"
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "The Great Gatsby"
                      author:
                        type: string
                        example: "F. Scott Fitzgerald"
                      mrp:
                        type: number
                        format: float
                        example: 20.99
                      discounted_price:
                        type: number
                        format: float
                        example: 15.99
                      quantity:
                        type: integer
                        example: 100
                      book_details:
                        type: string
                        nullable: true
                        example: "A story of the fabulously wealthy Jay Gatsby"
                      genre:
                        type: string
                        nullable: true
                        example: "Fiction"
                      book_image:
                        type: string
                        nullable: true
                        example: "http://example.com/book-cover.jpg"
        "404":
          description: Book not found or has been deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Book not found or has been deleted"
              example:
                errors: "Book not found or has been deleted"

  /api/v1/books/toggle_delete/{id}:
    patch:
      summary: Toggle Delete Status of a Book
      description: Toggles the delete status of a book (marks as deleted or restores it) by its ID
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to toggle delete status
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Book delete status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book marked as deleted"
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "The Great Gatsby"
                      author:
                        type: string
                        example: "F. Scott Fitzgerald"
                      mrp:
                        type: number
                        format: float
                        example: 20.99
                      discounted_price:
                        type: number
                        format: float
                        example: 15.99
                      quantity:
                        type: integer
                        example: 100
                      book_details:
                        type: string
                        nullable: true
                        example: "A story of the fabulously wealthy Jay Gatsby"
                      genre:
                        type: string
                        nullable: true
                        example: "Fiction"
                      book_image:
                        type: string
                        nullable: true
                        example: "http://example.com/book-cover.jpg"
                      is_deleted:
                        type: boolean
                        example: true
              examples:
                marked_as_deleted:
                  summary: Book marked as deleted
                  value:
                    message: "Book marked as deleted"
                    book:
                      id: 1
                      name: "The Great Gatsby"
                      author: "F. Scott Fitzgerald"
                      mrp: 20.99
                      discounted_price: 15.99
                      quantity: 100
                      book_details: "A story of the fabulously wealthy Jay Gatsby"
                      genre: "Fiction"
                      book_image: "http://example.com/book-cover.jpg"
                      is_deleted: true
                restored:
                  summary: Book restored
                  value:
                    message: "Book restored"
                    book:
                      id: 1
                      name: "The Great Gatsby"
                      author: "F. Scott Fitzgerald"
                      mrp: 20.99
                      discounted_price: 15.99
                      quantity: 100
                      book_details: "A story of the fabulously wealthy Jay Gatsby"
                      genre: "Fiction"
                      book_image: "http://example.com/book-cover.jpg"
                      is_deleted: false
        "422":
          description: Book not found or update failed due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                      - type: string
                      - type: array
                        items:
                          type: string
              examples:
                not_found:
                  summary: Book not found
                  value:
                    errors: "Book not found"
                validation_error:
                  summary: Validation error
                  value:
                    errors: ["Some validation error"]

  /api/v1/books/{id}:
    delete:
      summary: Hard Delete a Book
      description: Permanently deletes a book by its ID from the database
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to delete
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Book permanently deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book permanently deleted"
              example:
                message: "Book permanently deleted"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Book not found"
              example:
                errors: "Book not found"

  /api/v1/reviews/add:
    post:
      summary: Add a Review
      description: Allows a user to add a review for a book.
      tags:
        - Reviews
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      example: 1
                    book_id:
                      type: integer
                      example: 5
                    rating:
                      type: integer
                      example: 4
                    comment:
                      type: string
                      example: "Great book! Highly recommend."
                  required:
                    - user_id
                    - book_id
                    - rating
                    - comment
      responses:
        "201":
          description: Review successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review added successfully"
                  review:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      user_id:
                        type: integer
                        example: 1
                      book_id:
                        type: integer
                        example: 5
                      rating:
                        type: integer
                        example: 4
                      comment:
                        type: string
                        example: "Great book! Highly recommend."
        "422":
          description: Validation error (unprocessable entity)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: "Rating can't be blank"

  /api/v1/reviews/{book_id}:
    get:
      summary: Get Reviews for a Book
      description: Fetches all reviews for a specific book.
      tags:
        - Reviews
      parameters:
        - name: book_id
          in: path
          required: true
          description: ID of the book whose reviews need to be fetched
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: Successfully fetched reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 10
                        user_id:
                          type: integer
                          example: 1
                        book_id:
                          type: integer
                          example: 5
                        rating:
                          type: integer
                          example: 4
                        comment:
                          type: string
                          example: "Great book! Highly recommend."
        "404":
          description: Book not found

  /api/v1/reviews/{id}:
    delete:
      summary: Delete a Review
      description: Deletes a review by its ID.
      tags:
        - Reviews
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the review to be deleted
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review deleted successfully"
        "404":
          description: Review not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Review not found"

  /api/v1/carts/add:
    post:
      summary: Add Book to Cart
      description: Adds a book to the authenticated user's cart. If the book already exists in the cart, the quantity is updated.
      tags:
        - Carts
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cart:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      example: 1
                      description: "The ID of the user adding the book to the cart"
                    book_id:
                      type: integer
                      example: 456
                      description: "The ID of the book to add to the cart"
                    quantity:
                      type: integer
                      minimum: 1
                      example: 2
                      description: "The quantity of the book to add (must be greater than 0)"
                  required:
                    - user_id
                    - book_id
                    - quantity
      responses:
        "201":
          description: Book successfully added to or updated in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book added to cart"
                  cart:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 1
                      book_id:
                        type: integer
                        example: 456
                      quantity:
                        type: integer
                        example: 2
                      is_deleted:
                        type: boolean
                        example: false
              examples:
                added:
                  summary: Book added to cart
                  value:
                    message: "Book added to cart"
                    cart:
                      id: 1
                      user_id: 1
                      book_id: 456
                      quantity: 2
                      is_deleted: false
                updated:
                  summary: Book quantity updated in cart
                  value:
                    message: "Book quantity updated in cart"
                    cart:
                      id: 1
                      user_id: 1
                      book_id: 456
                      quantity: 4
                      is_deleted: false
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Invalid token"
        "422":
          description: Validation error (unprocessable entity)
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    oneOf:
                      - type: string
                      - type: array
                        items:
                          type: string
                examples:
                  invalid_quantity:
                    summary: Invalid quantity
                    value:
                      errors: "Invalid quantity"
                  missing_fields:
                    summary: Missing required fields
                    value:
                      errors: ["User can't be blank", "Book can't be blank"]
                  validation_errors:
                    summary: Other validation errors
                    value:
                      errors: ["Quantity must be greater than 0"]

  /api/v1/carts:
    get:
      summary: Get User Cart
      description: Retrieves all active items in the authenticated user's cart, including book details and quantities.
      tags:
        - Carts
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        "200":
          description: Cart retrieved successfully (returns array even if empty)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart retrieved successfully"
                  cart:
                    type: array
                    items:
                      type: object
                      properties:
                        cart_id:
                          type: integer
                          example: 1
                          description: "The ID of the cart item"
                        book_id:
                          type: integer
                          example: 456
                          description: "The ID of the book"
                        book_name:
                          type: string
                          example: "Ruby on Rails Guide"
                          description: "The name of the book"
                        quantity:
                          type: integer
                          example: 2
                          description: "The quantity of the book in the cart"
                        price:
                          type: number
                          format: float
                          example: 800.0
                          description: "The discounted price of the book"
              examples:
                with_items:
                  summary: Cart with items
                  value:
                    message: "Cart retrieved successfully"
                    cart:
                      - cart_id: 1
                        book_id: 456
                        book_name: "Ruby on Rails Guide"
                        quantity: 2
                        price: 800.0
                empty_cart:
                  summary: Empty cart
                  value:
                    message: "Cart is empty"
                    cart: []
        "401":
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Invalid token"
              examples:
                missing_token:
                  value:
                    errors: "Token is missing"
                invalid_token:
                  value:
                    errors: "Invalid token"
        "422":
          description: Validation error or error retrieving cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: string
                    example: "Error retrieving cart: Database error"
              example:
                errors: "Error retrieving cart: Database error"